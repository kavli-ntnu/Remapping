classdef ArenaCoverageTester < matlab.unittest.TestCase
    methods(Test)

        function noArguments(testCase)
            testCase.verifyError(@()analyses.arenaCoverage(), 'MATLAB:minrhs');
        end

        function wrongPos(testCase)
            pos = [];
            binWidth = [];
            shape = [];
            dimensions = [];

            testCase.verifyError(@() analyses.arenaCoverage(pos, binWidth, shape, dimensions),...
                'MATLAB:InputParser:ArgumentFailedValidation');

            pos = 0;
            binWidth = 2.5;
            shape = 1;
            dimensions = 10;
            testCase.verifyError(@() analyses.arenaCoverage(pos, binWidth, shape, dimensions),...
                'MATLAB:InputParser:ArgumentFailedValidation');
        end

        function wrongBinWidth(testCase)
            pos = [1 2 3];
            binWidth = [];
            shape = [];
            dimensions = [];

            testCase.verifyError(@() analyses.arenaCoverage(pos, binWidth, shape, dimensions),...
                'MATLAB:InputParser:ArgumentFailedValidation');

            binWidth = [1 2 3 4 5];
            testCase.verifyError(@() analyses.arenaCoverage(pos, binWidth, shape, dimensions),...
                'MATLAB:InputParser:ArgumentFailedValidation');

            binWidth = [2 -4];
            testCase.verifyError(@() analyses.arenaCoverage(pos, binWidth, shape, dimensions),...
                'MATLAB:InputParser:ArgumentFailedValidation');

            binWidth = 0;
            testCase.verifyError(@() analyses.arenaCoverage(pos, binWidth, shape, dimensions),...
                'MATLAB:InputParser:ArgumentFailedValidation');
        end

        function wrongShape(testCase)
            pos = [1 2 3];
            binWidth = 2.5;
            shape = [];
            dimensions = [];

            testCase.verifyError(@() analyses.arenaCoverage(pos, binWidth, shape, dimensions),...
                'MATLAB:InputParser:ArgumentFailedValidation');

            shape = -1;
            testCase.verifyError(@() analyses.arenaCoverage(pos, binWidth, shape, dimensions),...
                'MATLAB:InputParser:ArgumentFailedValidation');

            shape = 321;
            testCase.verifyError(@() analyses.arenaCoverage(pos, binWidth, shape, dimensions),...
                'MATLAB:InputParser:ArgumentFailedValidation');

            shape = 0;
            testCase.verifyError(@() analyses.arenaCoverage(pos, binWidth, shape, dimensions),...
                'MATLAB:InputParser:ArgumentFailedValidation');
        end

        function wrongDimensions(testCase)
            pos = [1 2 3];
            binWidth = 2.5;
            shape = 1;
            dimensions = [];

            testCase.verifyError(@() analyses.arenaCoverage(pos, binWidth, shape, dimensions),...
                'MATLAB:InputParser:ArgumentFailedValidation');

            dimensions = -10;
            testCase.verifyError(@() analyses.arenaCoverage(pos, binWidth, shape, dimensions),...
                'MATLAB:InputParser:ArgumentFailedValidation');

            dimensions = 0;
            testCase.verifyError(@() analyses.arenaCoverage(pos, binWidth, shape, dimensions),...
                'MATLAB:InputParser:ArgumentFailedValidation');
        end

        function trackPerfectCoverage(testCase)
            numSamples = 20;
            dimensions = 20;
            pos(:, 1) = 0:0.02:0.02*(numSamples-1);
            pos(:, 2) = linspace(-dimensions/2, dimensions/2, numSamples);
            binWidth = 2;
            shape = bntConstants.ArenaShape.Track;

            coverage = analyses.arenaCoverage(pos, binWidth, shape, dimensions);
            testCase.verifyEqual(coverage, 100.);
        end

        function trackPosNan(testCase)
            numSamples = 20;
            dimensions = 20;
            pos(:, 1) = 0:0.02:0.02*(numSamples-1);
            pos(:, 2) = nan(numSamples, 1);
            binWidth = 2;
            shape = bntConstants.ArenaShape.Track;

            coverage = analyses.arenaCoverage(pos, binWidth, shape, dimensions);
            testCase.verifyEqual(coverage, 0.);
        end

        function onlyPosOutliers(testCase)
            numSamples = 20;
            dimensions = 20;
            pos(:, 1) = 0:0.02:0.02*(numSamples-1);
            pos(:, 2) = nan(numSamples, 1);
            binWidth = 2;
            shape = bntConstants.ArenaShape.Track;

            pos(1, 2) = -dimensions; % completely out of limits
            pos(2, 2) = -dimensions/2 - 1; % out of limits by 1
            pos(3, 2) = dimensions;
            pos(4, 2) = dimensions/2 + 1;

            coverage = analyses.arenaCoverage(pos, binWidth, shape, dimensions);
            testCase.verifyEqual(coverage, 0.);
        end

        % Edge positions on a linear track
        function trackEdgePos(testCase)
            numSamples = 20;
            dimensions = 20;
            pos(:, 1) = 0:0.02:0.02*(numSamples-1);
            pos(:, 2) = nan(numSamples, 1);
            binWidth = 2;
            shape = bntConstants.ArenaShape.Track;

            pos(1, 2) = -dimensions/2;
            pos(2, 2) = dimensions/2;

            coverage = analyses.arenaCoverage(pos, binWidth, shape, dimensions);
            testCase.verifyEqual(coverage, 20.); % 2 bins out of 20
        end

        function squareSomeCoverage(testCase)
            pos = [
                     0   -7.4654   -5.1228; ...
                0.0200   -7.0599   -5.7310; ...
                0.0400   -6.5438   -6.2456; ...
                0.0600   -6.2488   -6.7135; ...
                0.0800   -5.5853   -6.9006; ...
                0.1000   -4.5899   -6.9006; ...
                0.1200   -3.5576   -6.8538; ...
                0.1400   -2.8940   -6.7602; ...
                0.1600   -2.5253   -5.9649; ...
                0.1800   -2.2304   -5.3567; ...
                0.2000   -1.7512   -6.1520; ...
                0.2200   -0.9032   -6.4327; ...
                0.2400    0.6452   -6.4795; ...
                0.2600    1.1982   -5.6842; ...
                0.2800    0.7926   -4.5614; ...
                0.3000    2.8571   -4.8421; ...
                0.3200    3.5945   -5.7778; ...
                0.3400    4.9217   -5.8713; ...
                0.3600    5.9908   -5.6842; ...
                0.3800    5.6590   -4.6550; ...
                0.4000    4.1475   -4.5614; ...
                0.4200    3.0783   -3.6725; ...
                0.4400    1.7880   -3.7193; ...
                0.4600    1.1982   -4.0936; ...
                0.4800    0.7189   -2.8304; ...
                0.5000    0.4608   -0.8187; ...
                0.5200   -0.2028    0.5848; ...
                0.5400   -0.8664   -0.0234; ...
                0.5600   -0.6820   -1.7076; ...
                0.5800   -1.1982   -3.0175; ...
                0.6000   -3.0783   -3.1579; ...
                0.6200   -3.1889   -3.7661; ...
                0.6400   -3.9631   -4.1871; ...
                0.6600   -4.8479   -3.7661; ...
                0.6800   -5.5484   -3.6725; ...
                0.7000   -5.6959   -2.7368; ...
                0.7200   -6.3963   -2.2222; ...
                0.7400   -6.7281   -1.4269; ...
                0.7600   -6.8387   -0.9591; ...
                0.7800   -5.3641   -0.6316; ...
                0.8000   -5.0691   -1.1462; ...
                0.8200   -4.5899   -2.0351; ...
                0.8400   -4.4793   -2.9708; ...
                0.8600   -3.4470   -2.7368; ...
                0.8800   -3.1521   -2.7836; ...
                0.9000   -2.1567   -1.9883; ...
                0.9200   -2.3410   -1.4737; ...
                0.9400   -2.9677   -1.0058; ...
                0.9600   -3.4839   -0.5848; ...
                0.9800   -4.2949   -0.1637; ...
            ];
            binWidth = 2;
            shape = bntConstants.ArenaShape.Box;
            dimensions = 16;

            expCoverage = 22/64 * 100; % 22 bins out of 64

            coverage = analyses.arenaCoverage(pos, binWidth, shape, dimensions);
            testCase.verifyEqual(coverage, expCoverage);
        end

        function circleOutliersInLastBin(testCase)
            numSamples = 16;
            dimensions = 8;
            pos(:, 1) = 0:0.02:0.02*(numSamples-1);
            pos(:, 2:3) = [
                -3 -3; ...
                -2.7 -1; ...
                -2.5 0.3; ...
                -3.5 3; ...

                -1 -3; ...
                -0.7 -1; ...
                -0.5 0.3; ...
                -1.5 3; ...

                1 -3; ...
                1.7 -1; ...
                1.5 0.3; ...
                0.5 3; ...

                2.1 -2.1; ...
                2.3 -1; ...
                3.5 1; ...
                2.3 2.1; ...
            ]; % 2 bins out of 16 are unvisited
            binWidth = 2;
            shape = bntConstants.ArenaShape.Circle;

            coverage = analyses.arenaCoverage(pos, binWidth, shape, dimensions);
            testCase.verifyEqual(coverage, 87.5);
        end

        function circleSomeOutliersInLastBin(testCase)
            numSamples = 17;
            dimensions = 8;
            pos(:, 1) = 0:0.02:0.02*(numSamples-1);
            pos(:, 2:3) = [
                -3 -3; ...
                -2.7 -1; ...
                -2.5 0.3; ...
                -3.5 3; ...

                -1 -3; ...
                -0.7 -1; ...
                -0.5 0.3; ...
                -1.5 3; ...

                1 -3; ...
                1.7 -1; ...
                1.5 0.3; ...
                0.5 3; ...

                2.1 -2.1; ...
                2.3 -1; ...
                3.5 1; ...
                2.3 2.1; ...

                -2.5 2.1; ... % upper-left corner, edge bin, inside the circle
            ];
            binWidth = 2;
            shape = bntConstants.ArenaShape.Circle;

            coverage = analyses.arenaCoverage(pos, binWidth, shape, dimensions);
            testCase.verifyEqual(coverage, 93.75);
        end

        function circlePerfectCoverage(testCase)
            numSamples = 17;
            dimensions = 8;
            pos(:, 1) = 0:0.02:0.02*(numSamples-1);
            pos(:, 2:3) = [
                -3 -2.1; ...
                -2.7 -1; ...
                -2.5 0.3; ...
                -3.5 3; ...

                -1 -3; ...
                -0.7 -1; ...
                -0.5 0.3; ...
                -1.5 3; ...

                1 -3; ...
                1.7 -1; ...
                1.5 0.3; ...
                0.5 3; ...

                2.1 -2.1; ...
                2.3 -1; ...
                3.5 1; ...
                2.3 2.1; ...

                -2.5 2.1; ...
            ];
            binWidth = 2;
            shape = bntConstants.ArenaShape.Circle;

            coverage = analyses.arenaCoverage(pos, binWidth, shape, dimensions);
            testCase.verifyEqual(coverage, 100.);
        end
    end
end
